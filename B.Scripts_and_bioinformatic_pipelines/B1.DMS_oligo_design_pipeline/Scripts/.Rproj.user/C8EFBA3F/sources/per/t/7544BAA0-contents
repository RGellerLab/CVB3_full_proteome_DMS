###Generates oligos for each tile with mutations in each position to each of the 20 aas + 
###deletion + stop codons

###Requires:
###Tiles_overlaps_seq.csv generated by script #2
###CVB3_codon_changer_table.csv generated by script #1

###Output:Oligos folder

library(Biostrings)
library(tidyverse)
library(readxl)

###create output directory
output.dir="./Oligos/"
dir.create(output.dir,showWarnings = F)

###Read CVB3 codon changer table
codon_changer<-read.csv("./CVB3_codon_changer_table.csv")

###Read reference sequence to be mutated
data<-data.frame(read.csv("./Tiles_overlaps_seq.csv"))
n.tiles=nrow(data)

# MAKE A TABLE WITH CODON AND NEW CODON TO ADD... put outside


syn.codons=bind_cols(ref.codon=c("AGA","AGG","CGT","CGG","CGC","CGA","CTA","TTA","CTT","CTC","CTG",
                                 "TTG","TCC","TCA","AGC","AGT","TCG","TCT"),
                     mut.codon=c("CGG","CGC","AGG","AGA","AGG","AGG","TTG","CTG","TTA","TTA","TTA",
                                 "CTA","AGT","AGC","TCA","TCA","AGC","AGC"))
stp.codons=bind_cols(ref.codon=c(  "GTG", "GAA", "AAA", "TAC", "CAA","GAG"),
                     mut.codon=c( "TAA", "TAG", "TAG","TGA","TAG","TGA"))


###Track number of oligos, syn changes, STOP codons
summary.table=data.frame(matrix(ncol=5))
colnames(summary.table)=c("tile", "num.oligos", "num.syn", "num.stop", "num.del")


### For each tile: Mutate each codon to 20aa + del + STOP + add overlaps

for(j in 1:n.tiles){
        #j<-1
        #i<-1
        #x<-1
        
        num.oligos=0
        num.syn=0
        num.stop=0
        num.del=0
        
        ###Read codons
        refseq=unlist(strsplit(data$ref_seq[j],""))
        ref.codons=sapply(seq(from = 1,to = (length(refseq)-2), by = 3), function(x) paste0(refseq[x:(x+2)],collapse = ""))
        # ref.aa=as.character(translate(DNAStringSet(ref.codons),no.init.codon = T))
        n.codons=length(refseq)/3
        
        # make a df with each row representing all codons
        res.df=data.frame(matrix(nrow=21,ncol=n.codons,data=NA))
        for (r in 1:21){res.df[r,]=ref.codons
        rm(r)}
        
        ## iterate on each codon in tile
        for(i in 1:n.codons){
                # i=1
                #make a temp df for changing codons
                cod.df=res.df
                ## get the changes you want for each codon 
                cod.df[,i]=filter(codon_changer,codon==ref.codons[i]) %>% 
                        select(new.codon)
                
                ## get names names
                nms=filter(codon_changer,codon==ref.codons[i]) %>% 
                        mutate(pos=data$start_aa[j]+i-1) %>% 
                        mutate(tile=paste0("Tile_",j,"_"))
                nms[nms==""]="del"
                
                
                ## remove synonymous by matching names with new and old aa
                
                cod.df=cod.df[!nms$aa==nms$new.aa,]
                nms=nms[!nms$aa==nms$new.aa,]
                
                num.oligos= num.oligos + nrow(cod.df)
                num.del=num.del + 1
                
                ### check if syn changes included
                if (ref.codons[i] %in% syn.codons$ref.codon) {
                        
                        # ref.codons[i]="CTA"
                        tmp.ref.codons=ref.codons ## tmp seq for mutating codon
                        
                        #mutate codon in temp codon list by looking up in add.codons table
                        tmp.ref.codons[i]=syn.codons$mut.codon[syn.codons$ref.codon==ref.codons[i]]
                        
                        ## add to tile.muts df so can collapse together
                        cod.df=rbind(cod.df,tmp.ref.codons)
                        
                        ## add names
                        syn.name<-filter(codon_changer,codon==ref.codons[i])[1,] %>% 
                                mutate(new.codon=tmp.ref.codons[i]) %>%  
                                mutate(new.aa=aa) %>% 
                                mutate(pos=data$start_aa[j]+i-1) %>% 
                                mutate(tile=paste0("Tile_",j,"_"))
                        
                        ### add new names if silent muts
                        nms=bind_rows(nms,syn.name)
                        rm(tmp.ref.codons)
                        
                        num.oligos = num.oligos + 1
                        num.syn = num.syn + 1
                }
                
                if (ref.codons[i] %in% stp.codons$ref.codon) {
                        
                        # ref.codons[i]="CTA"
                        tmp.ref.codons=ref.codons ## tmp seq for mutating codon
                        
                        #mutate codon in temp codon list by looking up in stp.codons table
                        tmp.ref.codons[i]=stp.codons$mut.codon[stp.codons$ref.codon==ref.codons[i]]
                        
                        ## add to tile.muts df so can collapse together
                        cod.df=rbind(cod.df,tmp.ref.codons)
                        
                        ## add names
                        stp.name<-filter(codon_changer,codon==ref.codons[i])[1,] %>% 
                                mutate(new.codon=tmp.ref.codons[i]) %>%  
                                mutate(new.aa="X") %>% 
                                mutate(pos=data$start_aa[j]+i-1) %>% 
                                mutate(tile=paste0("Tile_",j,"_"))
                        
                        ### add new names if stp muts
                        nms=bind_rows(nms,stp.name)
                        rm(tmp.ref.codons)
                        
                        num.oligos = num.oligos + 1
                        num.stop = num.stop + 1
                }
                
                ## stop codon changer when reaching stop codon TAG
                if (ref.codons[i]== "TAG") {break}
                        
                ## now need to collapse into sequence
                
                tile.muts=apply(cod.df,1,function(x) paste0(x,collapse = ""))
                
                ## append termini 
                
                tile.muts=sapply(tile.muts,function(x) paste0(data$overlap_5[j], x, data$overlap_3[j]) )
                
                
                ## collapse names
                
                nms=unite(nms,name,tile,aa,pos,new.aa,sep = "") %>% select(name)
                names(tile.muts)=nms$name
                final.seq=DNAStringSet(tile.muts)
                writeXStringSet(final.seq,paste0(output.dir,"Tile_",j+8,"_oligos.fa"), append = TRUE)
                
                
                summary.table[j,]=c(j+8, num.oligos, num.syn, num.stop, num.del)
                
                # write.table(tile.muts,paste0(output.dir,"Tile_",j,"_oligos.csv"), 
                #             row.names = F, col.names =F,
                #             append = T)
        }
        # write.table(tile.muts,paste0(output.dir,"Tile_",j,"_oligos.csv"), row.names = F, col.names =F)
        # rm(tile.muts,nms,ref.seq,ref.codons,n.codons)
        
}

summary.table[nrow(summary.table)+1,]<-c("total",sum(summary.table$num.oligos), sum(summary.table$num.syn), sum(summary.table$num.stop), sum(summary.table$num.del))
write.csv(summary.table,"./Summary_table.csv", row.names = F)

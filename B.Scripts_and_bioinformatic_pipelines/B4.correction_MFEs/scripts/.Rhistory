##################################################################################
#apply lm to data and save corrected data
df=mfes
df$cor_lm_passage2=coefficients_passage2[1]+coefficients_passage2[2]*df$cor_passage2
df$cor_lm_passage2[df$cor_passage2==-20]=-20
#label lethal muts as -20s
df$cor_lm_passage2[df$cor_passage2==-20]=-20
df$cor_lm_passage2[df$wtAA==df$mutAA]=0
#label widtyoes as 0s
df$cor_lm_passage2[df$wtAA==df$mutAA]=0
res <- df
View(res)
##################################################################################
#apply lm to data and save corrected data
df=mfes %>% select(!mutation)
df$cor_lm_passage2=coefficients_passage2[1]+coefficients_passage2[2]*df$cor_passage2
#label lethal muts as -20s
df$cor_lm_passage2[df$cor_passage2==-20]=-20
#label widtyoes as 0s
df$cor_lm_passage2[df$wtAA==df$mutAA]=0
res <- df
View(res)
colnames(df[,4:7])
colnames(df[,c(4:7)]
)
colnames(df[,c(4:7)])
colnames(df[c(4:7)])
df[c(4:7)]
colnames(res[c(4:6)])
res <- df
for (i in colnames(res[c(4:6)])){
column_name=i
# Calculate min mfe
min_cor_mfe <- min(res[[column_name]][res[[column_name]] > -20], na.rm = TRUE)
# Replace -20 values for min mfe
res[[column_name]][res[[column_name]] == -20] <- (min_cor_mfe)
rm(min_cor_mfe)}
View(res)
write.csv(res, "corrected_data.csv",row.names = F)
library(tidyverse)
library(ggpubr)
#read dels
delsp2=read_csv("../mutmfe_data/delsmfe_per_passage_rP2.csv")
delsp2=delsp2 %>% select(site, "wtAA"=wildtype, "passage2"=rP2_passage2)
delsp2 <- delsp2 %>%
mutate(passage2 = ifelse(is.na(passage2) & lag(wtAA) == wtAA, lag(passage2), passage2))
delsp3=read_csv("../mutmfe_data/delsmfe_per_passage_rP3.csv")
delsp3=delsp3 %>% select(site, "wtAA"=wildtype, "passage2"=rP3_passage2)
delsp3 <- delsp3 %>%
mutate(passage2 = ifelse(is.na(passage2) & lag(wtAA) == wtAA, lag(passage2), passage2))
# Read p3 data
p3=read_csv("../mutmfe_data/mutmfe_per_passage_rP3.csv")
p3=p3 %>% select(site, wtAA, mutAA, rP3_passage2)
p3overlap=p3 %>% filter(site %in% c(1416:1434))
p2=read.csv("../mutmfe_data/mutmfe_per_passage_rP2.csv")
p2overlap=p2 %>% filter(site %in% c(1416:1434))
p2p3=p2overlap %>% left_join(p3overlap, by=c("site","wtAA","mutAA"))
#remove lethal mutations
p2p3$rP2_passage2[p2p3$rP2_passage2==-20]=NA
p2p3$rP3_passage2[p2p3$rP3_passage2==-20]=NA
p2p3=p2p3 %>% filter(!wtAA==mutAA)
#get the coefficients of the linear model for p2p3 overlap
coef_p2_lm<-coef(lm(rP2_passage2 ~ rP3_passage2, data = p2p3))
#correct overlap
p2p3$rP3_cor_passage2 = coef_p2_lm[[1]] + (coef_p2_lm[[2]] * p2p3$rP3_passage2)
#correct P3 region
p3$rP3_cor_passage2 = coef_p2_lm[[1]] + (coef_p2_lm[[2]] * p3$rP3_passage2)
#correct P3 dels
delsp3$cor_passage2 = coef_p2_lm[[1]] + (coef_p2_lm[[2]] * delsp3$passage2)
p3=p3 %>% select(site, wtAA, mutAA, rP3_passage2,rP3_cor_passage2)
rm(p2p3, p2overlap,p3overlap,coef_p2_lm)
p2overlap=p2 %>% filter(site %in% c(847:851))
p1=read.csv("../mutmfe_data/mutmfe_per_passage_rP1.csv")
p1overlap=p1 %>% filter(site %in% c(847:851))
p1p2=p1overlap %>% left_join(p2overlap, by=c("site","wtAA","mutAA"))
#remove lethal mutations
p1p2$rP1_passage2[p1p2$rP1_passage2==-20]=NA
p1p2$rP2_passage2[p1p2$rP2_passage2==-20]=NA
p1p2=p1p2 %>% filter(!wtAA==mutAA)
#get cofficients of the linear model for the p1p2 overlap
coef_P1_lm<-coef(lm((rP2_passage2) ~ (rP1_passage2), data = p1p2))
#correct P1 region
p1$rP1_cor_passage2 =coef_P1_lm[[1]] + (coef_P1_lm[[2]] * (p1$rP1_passage2))
p1=p1 %>% select(site, wtAA, mutAA, rP1_passage2,rP1_cor_passage2)
rm(p1p2, p2overlap,p1overlap,coef_P1_lm)
########################################################################
#rename columns to merge data and label lethal muts in corrected dataset as -20s
p1=p1 %>% select(site, wtAA, mutAA, "passage2"=rP1_passage2,"cor_passage2"=rP1_cor_passage2)
p1$cor_passage2[p1$passage2==-20]=-20
p1=p1 %>%filter(site %in% c(1:851))
p2=p2 %>% select(site, wtAA, mutAA, "passage2"=rP2_passage2,"cor_passage2"=rP2_passage2)
p2$cor_passage2[p2$passage2==-20]=-20
p2=p2 %>%filter(site %in% c(852:1429))
p3=p3 %>% select(site, wtAA, mutAA, "passage2"=rP3_passage2,"cor_passage2"=rP3_cor_passage2)
p3$cor_passage2[p3$passage2==-20]=-20
p3=p3 %>%filter(site %in% c(1430:2185))
mfes=rbind(p1,p2)
mfes=rbind(mfes,p3)
#merge dels
delsp1=p1 %>% group_by(site,wtAA) %>% summarise()
delsp1$passage2=NA
delsp1$cor_passage2=NA
delsp1$mutAA="del"
delsp1=delsp1 %>%filter(site %in% c(1:846))
delsp2$cor_passage2=delsp2$passage2
delsp2=delsp2 %>% select(site, "passage2","cor_passage2")
delsp2$cor_passage2[delsp2$passage2==-20]=-20
delsp2=delsp2 %>%filter(site %in% c(847:1429))
delsp2$mutAA="del"
delsp2=delsp2 %>% left_join(unique(mfes[,c(1:2)]), by="site")
delsp3=delsp3 %>% select(site,"passage2","cor_passage2")
delsp3$cor_passage2[delsp3$passage2==-20]=-20
delsp3=delsp3 %>%filter(site %in% c(1430:2185))
delsp3$mutAA="del"
delsp3=delsp3 %>% left_join(unique(p3[,c(1:2)]), by="site")
dels=rbind(delsp1,delsp2)
dels=rbind(dels,delsp3)
rm(p1,p2,p3, delsp1,delsp2,delsp3)
#join data
mfes=rbind(mfes,dels)
############################################################################
#correct data with mCherry model
mfes$mutation=paste0(mfes$wtAA, mfes$site, mfes$mutAA)
#read experimental data and join to df
data=read.csv("../comp_assay_data.csv") %>% select(mutation, region, avg_norm_t20_t8,sd_norm_t20_t8)
data=data %>% left_join(mfes, by="mutation")
data=data %>% filter(!cor_passage2==-20)
# Fit Linear Model for passage2 corrected vs experimental data
lm_model_passage2 <- lm(log2(avg_norm_t20_t8) ~ cor_passage2, data = data)
# Get Cook's distance to define outliers
cooksd_passage2 <- cooks.distance(lm_model_passage2)
# Identify outliers based on Cook's distance for passage2
outliers_passage2 <- which(cooksd_passage2 >4 / length(cooksd_passage2))
# Create a subset without outliers for passage2
if(length(outliers_passage2)>1){
data_no_outliers_passage2 <- data[-outliers_passage2,]
}else{data_no_outliers_passage2=data}
#lm without outliers
lm_model_passage2 <- (lm(log2(avg_norm_t20_t8) ~ cor_passage2, data = data_no_outliers_passage2))
# Get coefficients of the Linear Model for passage2 corrected vs experimental data
coefficients_passage2 <- coef(lm_model_passage2)
##################################################################################
#apply lm to data and save corrected data
df=mfes %>% select(!mutation)
df$cor_lm_passage2=coefficients_passage2[1]+coefficients_passage2[2]*df$cor_passage2
#label lethal muts as -20s
df$cor_lm_passage2[df$cor_passage2==-20]=-20
#label widtypes as 0s
df$cor_lm_passage2[df$wtAA==df$mutAA]=0
res <- df
for (i in colnames(res[c(4:6)])){
column_name=i
# Calculate min mfe
min_cor_mfe <- min(res[[column_name]][res[[column_name]] > -20], na.rm = TRUE)
# Replace -20 values for min mfe
res[[column_name]][res[[column_name]] == -20] <- (min_cor_mfe)
rm(min_cor_mfe)}
write.csv(res, "../corrected_data.csv",row.names = F)
library(tidyverse)
library(ggpubr)
#read dels
delsp2=read_csv("../mutmfe_data/delsmfe_per_passage_rP2.csv")
delsp2=delsp2 %>% select(site, "wtAA"=wildtype, "passage2"=rP2_passage2)
delsp2 <- delsp2 %>%
mutate(passage2 = ifelse(is.na(passage2) & lag(wtAA) == wtAA, lag(passage2), passage2))
delsp3=read_csv("../mutmfe_data/delsmfe_per_passage_rP3.csv")
delsp3=delsp3 %>% select(site, "wtAA"=wildtype, "passage2"=rP3_passage2)
delsp3 <- delsp3 %>%
mutate(passage2 = ifelse(is.na(passage2) & lag(wtAA) == wtAA, lag(passage2), passage2))
# Read p3 data
p3=read_csv("../mutmfe_data/mutmfe_per_passage_rP3.csv")
p3=p3 %>% select(site, wtAA, mutAA, rP3_passage2)
p3overlap=p3 %>% filter(site %in% c(1416:1434))
p2=read.csv("../mutmfe_data/mutmfe_per_passage_rP2.csv")
p2overlap=p2 %>% filter(site %in% c(1416:1434))
p2p3=p2overlap %>% left_join(p3overlap, by=c("site","wtAA","mutAA"))
#remove lethal mutations
p2p3$rP2_passage2[p2p3$rP2_passage2==-20]=NA
p2p3$rP3_passage2[p2p3$rP3_passage2==-20]=NA
p2p3=p2p3 %>% filter(!wtAA==mutAA)
#get the coefficients of the linear model for p2p3 overlap
coef_p2_lm<-coef(lm(rP2_passage2 ~ rP3_passage2, data = p2p3))
#correct overlap
p2p3$rP3_cor_passage2 = coef_p2_lm[[1]] + (coef_p2_lm[[2]] * p2p3$rP3_passage2)
#correct P3 region
p3$rP3_cor_passage2 = coef_p2_lm[[1]] + (coef_p2_lm[[2]] * p3$rP3_passage2)
#correct P3 dels
delsp3$cor_passage2 = coef_p2_lm[[1]] + (coef_p2_lm[[2]] * delsp3$passage2)
p3=p3 %>% select(site, wtAA, mutAA, rP3_passage2,rP3_cor_passage2)
rm(p2p3, p2overlap,p3overlap,coef_p2_lm)
#This script reads mutmfe data and delmfe data, normalizes mfes between
# regions using overlap data and standardizes versus experimental fitness values
#Requires:
#1. mfe data (mutmfe_data folder)
#2. "../comp_assay_data.csv"
#output: "../corrected_data.csv"
library(tidyverse)
library(ggpubr)
#read dels
delsp2=read_csv("../mutmfe_data/delsmfe_per_passage_rP2.csv")
delsp2=delsp2 %>% select(site, "wtAA"=wildtype, "passage2"=rP2_passage2)
delsp2 <- delsp2 %>%
mutate(passage2 = ifelse(is.na(passage2) & lag(wtAA) == wtAA, lag(passage2), passage2))
delsp3=read_csv("../mutmfe_data/delsmfe_per_passage_rP3.csv")
delsp3=delsp3 %>% select(site, "wtAA"=wildtype, "passage2"=rP3_passage2)
delsp3 <- delsp3 %>%
mutate(passage2 = ifelse(is.na(passage2) & lag(wtAA) == wtAA, lag(passage2), passage2))
# Read p3 data
p3=read_csv("../mutmfe_data/mutmfe_per_passage_rP3.csv")
p3=p3 %>% select(site, wtAA, mutAA, rP3_passage2)
p3overlap=p3 %>% filter(site %in% c(1416:1434))
p2=read.csv("../mutmfe_data/mutmfe_per_passage_rP2.csv")
p2overlap=p2 %>% filter(site %in% c(1416:1434))
p2p3=p2overlap %>% left_join(p3overlap, by=c("site","wtAA","mutAA"))
#remove lethal mutations
p2p3$rP2_passage2[p2p3$rP2_passage2==-20]=NA
p2p3$rP3_passage2[p2p3$rP3_passage2==-20]=NA
p2p3=p2p3 %>% filter(!wtAA==mutAA)
#get the coefficients of the linear model for p2p3 overlap
coef_p2_lm<-coef(lm(rP2_passage2 ~ rP3_passage2, data = p2p3))
lm(rP2_passage2 ~ rP3_passage2, data = p2p3)
summary(lm(rP2_passage2 ~ rP3_passage2, data = p2p3))
p2overlap=p2 %>% filter(site %in% c(847:851))
p1=read.csv("../mutmfe_data/mutmfe_per_passage_rP1.csv")
p1overlap=p1 %>% filter(site %in% c(847:851))
p1p2=p1overlap %>% left_join(p2overlap, by=c("site","wtAA","mutAA"))
#remove lethal mutations
p1p2$rP1_passage2[p1p2$rP1_passage2==-20]=NA
p1p2$rP2_passage2[p1p2$rP2_passage2==-20]=NA
p1p2=p1p2 %>% filter(!wtAA==mutAA)
#get cofficients of the linear model for the p1p2 overlap
coef_P1_lm<-coef(lm((rP2_passage2) ~ (rP1_passage2), data = p1p2))
summary(lm((rP2_passage2) ~ (rP1_passage2), data = p1p2))
#correct P1 region
p1$rP1_cor_passage2 =coef_P1_lm[[1]] + (coef_P1_lm[[2]] * (p1$rP1_passage2))
p1=p1 %>% select(site, wtAA, mutAA, rP1_passage2,rP1_cor_passage2)
rm(p1p2, p2overlap,p1overlap,coef_P1_lm)
########################################################################
#rename columns to merge data and label lethal muts in corrected dataset as -20s
p1=p1 %>% select(site, wtAA, mutAA, "passage2"=rP1_passage2,"cor_passage2"=rP1_cor_passage2)
p1$cor_passage2[p1$passage2==-20]=-20
p1=p1 %>%filter(site %in% c(1:851))
p2=p2 %>% select(site, wtAA, mutAA, "passage2"=rP2_passage2,"cor_passage2"=rP2_passage2)
p2$cor_passage2[p2$passage2==-20]=-20
p2=p2 %>%filter(site %in% c(852:1429))
p3=p3 %>% select(site, wtAA, mutAA, "passage2"=rP3_passage2,"cor_passage2"=rP3_cor_passage2)
p3$cor_passage2[p3$passage2==-20]=-20
#merge dels
delsp1=p1 %>% group_by(site,wtAA) %>% summarise()
#This script reads mutmfe data and delmfe data, normalizes mfes between
# regions using overlap data and standardizes versus experimental fitness values
#Requires:
#1. mfe data (mutmfe_data folder)
#2. "../comp_assay_data.csv"
#output: "../corrected_data.csv"
library(tidyverse)
library(ggpubr)
#read dels
delsp2=read_csv("../mutmfe_data/delsmfe_per_passage_rP2.csv")
delsp2=delsp2 %>% select(site, "wtAA"=wildtype, "passage2"=rP2_passage2)
delsp2 <- delsp2 %>%
mutate(passage2 = ifelse(is.na(passage2) & lag(wtAA) == wtAA, lag(passage2), passage2))
delsp3=read_csv("../mutmfe_data/delsmfe_per_passage_rP3.csv")
delsp3=delsp3 %>% select(site, "wtAA"=wildtype, "passage2"=rP3_passage2)
delsp3 <- delsp3 %>%
mutate(passage2 = ifelse(is.na(passage2) & lag(wtAA) == wtAA, lag(passage2), passage2))
# Read p3 data
p3=read_csv("../mutmfe_data/mutmfe_per_passage_rP3.csv")
p3=p3 %>% select(site, wtAA, mutAA, rP3_passage2)
p3overlap=p3 %>% filter(site %in% c(1416:1434))
p2=read.csv("../mutmfe_data/mutmfe_per_passage_rP2.csv")
p2overlap=p2 %>% filter(site %in% c(1416:1434))
p2p3=p2overlap %>% left_join(p3overlap, by=c("site","wtAA","mutAA"))
#remove lethal mutations
p2p3$rP2_passage2[p2p3$rP2_passage2==-20]=NA
p2p3$rP3_passage2[p2p3$rP3_passage2==-20]=NA
p2p3=p2p3 %>% filter(!wtAA==mutAA)
#get the coefficients of the linear model for p2p3 overlap
coef_p2_lm<-coef(lm(rP2_passage2 ~ rP3_passage2, data = p2p3))
#correct overlap
p2p3$rP3_cor_passage2 = coef_p2_lm[[1]] + (coef_p2_lm[[2]] * p2p3$rP3_passage2)
#correct P3 region
p3$rP3_cor_passage2 = coef_p2_lm[[1]] + (coef_p2_lm[[2]] * p3$rP3_passage2)
#correct P3 dels
delsp3$cor_passage2 = coef_p2_lm[[1]] + (coef_p2_lm[[2]] * delsp3$passage2)
p3=p3 %>% select(site, wtAA, mutAA, rP3_passage2,rP3_cor_passage2)
rm(p2p3, p2overlap,p3overlap,coef_p2_lm)
#########################################################################
#Do the same for P1 overlap
p2overlap=p2 %>% filter(site %in% c(847:851))
p1=read.csv("../mutmfe_data/mutmfe_per_passage_rP1.csv")
p1overlap=p1 %>% filter(site %in% c(847:851))
p1p2=p1overlap %>% left_join(p2overlap, by=c("site","wtAA","mutAA"))
#remove lethal mutations
p1p2$rP1_passage2[p1p2$rP1_passage2==-20]=NA
p1p2$rP2_passage2[p1p2$rP2_passage2==-20]=NA
p1p2=p1p2 %>% filter(!wtAA==mutAA)
#get cofficients of the linear model for the p1p2 overlap
coef_P1_lm<-coef(lm((rP2_passage2) ~ (rP1_passage2), data = p1p2))
#correct P1 region
p1$rP1_cor_passage2 =coef_P1_lm[[1]] + (coef_P1_lm[[2]] * (p1$rP1_passage2))
p1=p1 %>% select(site, wtAA, mutAA, rP1_passage2,rP1_cor_passage2)
rm(p1p2, p2overlap,p1overlap,coef_P1_lm)
########################################################################
#rename columns to merge data and label lethal muts in corrected dataset as -20s
p1=p1 %>% select(site, wtAA, mutAA, "passage2"=rP1_passage2,"cor_passage2"=rP1_cor_passage2)
p1$cor_passage2[p1$passage2==-20]=-20
p1=p1 %>%filter(site %in% c(1:851))
p2=p2 %>% select(site, wtAA, mutAA, "passage2"=rP2_passage2,"cor_passage2"=rP2_passage2)
p2$cor_passage2[p2$passage2==-20]=-20
p2=p2 %>%filter(site %in% c(852:1429))
p3=p3 %>% select(site, wtAA, mutAA, "passage2"=rP3_passage2,"cor_passage2"=rP3_cor_passage2)
p3$cor_passage2[p3$passage2==-20]=-20
p3=p3 %>%filter(site %in% c(1430:2185))
mfes=rbind(p1,p2)
mfes=rbind(mfes,p3)
#merge dels
delsp1=p1 %>% group_by(site,wtAA) %>% summarise()
delsp1$passage2=NA
delsp1$cor_passage2=NA
delsp1=delsp1 %>%filter(site %in% c(1:846))
delsp1$mutAA="del"
delsp2$cor_passage2=delsp2$passage2
delsp2=delsp2 %>% select(site, "passage2","cor_passage2")
delsp2$cor_passage2[delsp2$passage2==-20]=-20
delsp2=delsp2 %>%filter(site %in% c(847:1429))
delsp2$mutAA="del"
delsp2=delsp2 %>% left_join(unique(mfes[,c(1:2)]), by="site")
delsp3=delsp3 %>% select(site,"passage2","cor_passage2")
delsp3$cor_passage2[delsp3$passage2==-20]=-20
delsp3=delsp3 %>%filter(site %in% c(1430:2185))
delsp3$mutAA="del"
delsp3=delsp3 %>% left_join(unique(p3[,c(1:2)]), by="site")
dels=rbind(delsp1,delsp2)
dels=rbind(dels,delsp3)
rm(p1,p2,p3, delsp1,delsp2,delsp3)
#join data
mfes=rbind(mfes,dels)
############################################################################
#correct data with mCherry model
mfes$mutation=paste0(mfes$wtAA, mfes$site, mfes$mutAA)
#read experimental data and join to df
data=read.csv("../comp_assay_data.csv") %>% select(mutation, region, avg_norm_t20_t8,sd_norm_t20_t8)
data=data %>% left_join(mfes, by="mutation")
data=data %>% filter(!cor_passage2==-20)
# Fit Linear Model for passage2 corrected vs experimental data
lm_model_passage2 <- lm(log2(avg_norm_t20_t8) ~ cor_passage2, data = data)
# Get Cook's distance to define outliers
cooksd_passage2 <- cooks.distance(lm_model_passage2)
# Identify outliers based on Cook's distance for passage2
outliers_passage2 <- which(cooksd_passage2 >4 / length(cooksd_passage2))
# Create a subset without outliers for passage2
if(length(outliers_passage2)>1){
data_no_outliers_passage2 <- data[-outliers_passage2,]
}else{data_no_outliers_passage2=data}
#lm without outliers
lm_model_passage2 <- (lm(log2(avg_norm_t20_t8) ~ cor_passage2, data = data_no_outliers_passage2))
summary (lm(log2(avg_norm_t20_t8) ~ cor_passage2, data = data_no_outliers_passage2))
library(tidyverse)
library(ggpubr)
#read dels
delsp2=read_csv("../mutmfe_data/delsmfe_per_passage_rP2.csv")
delsp2=delsp2 %>% select(site, "wtAA"=wildtype, "passage2"=rP2_passage2)
delsp2 <- delsp2 %>%
mutate(passage2 = ifelse(is.na(passage2) & lag(wtAA) == wtAA, lag(passage2), passage2))
delsp3=read_csv("../mutmfe_data/delsmfe_per_passage_rP3.csv")
delsp3=delsp3 %>% select(site, "wtAA"=wildtype, "passage2"=rP3_passage2)
delsp3 <- delsp3 %>%
mutate(passage2 = ifelse(is.na(passage2) & lag(wtAA) == wtAA, lag(passage2), passage2))
# Read p3 data
p3=read_csv("../mutmfe_data/mutmfe_per_passage_rP3.csv")
p3=p3 %>% select(site, wtAA, mutAA, rP3_passage2)
p3overlap=p3 %>% filter(site %in% c(1416:1434))
p2=read.csv("../mutmfe_data/mutmfe_per_passage_rP2.csv")
p2overlap=p2 %>% filter(site %in% c(1416:1434))
p2p3=p2overlap %>% left_join(p3overlap, by=c("site","wtAA","mutAA"))
#remove lethal mutations
p2p3$rP2_passage2[p2p3$rP2_passage2==-20]=NA
p2p3$rP3_passage2[p2p3$rP3_passage2==-20]=NA
p2p3=p2p3 %>% filter(!wtAA==mutAA)
#get the coefficients of the linear model for p2p3 overlap
coef_p2_lm<-coef(lm(rP2_passage2 ~ rP3_passage2, data = p2p3))
summary(lm(rP2_passage2 ~ rP3_passage2, data = p2p3))
p2overlap=p2 %>% filter(site %in% c(847:851))
p1=read.csv("../mutmfe_data/mutmfe_per_passage_rP1.csv")
p1overlap=p1 %>% filter(site %in% c(847:851))
p1p2=p1overlap %>% left_join(p2overlap, by=c("site","wtAA","mutAA"))
#remove lethal mutations
p1p2$rP1_passage2[p1p2$rP1_passage2==-20]=NA
p1p2$rP2_passage2[p1p2$rP2_passage2==-20]=NA
p1p2=p1p2 %>% filter(!wtAA==mutAA)
summary(lm((rP2_passage2) ~ (rP1_passage2), data = p1p2))
library(tidyverse)
library(ggpubr)
#read dels
delsp2=read_csv("../mutmfe_data/delsmfe_per_passage_rP2.csv")
delsp2=delsp2 %>% select(site, "wtAA"=wildtype, "passage2"=rP2_passage2)
delsp2 <- delsp2 %>%
mutate(passage2 = ifelse(is.na(passage2) & lag(wtAA) == wtAA, lag(passage2), passage2))
delsp3=read_csv("../mutmfe_data/delsmfe_per_passage_rP3.csv")
delsp3=delsp3 %>% select(site, "wtAA"=wildtype, "passage2"=rP3_passage2)
delsp3 <- delsp3 %>%
mutate(passage2 = ifelse(is.na(passage2) & lag(wtAA) == wtAA, lag(passage2), passage2))
# Read p3 data
p3=read_csv("../mutmfe_data/mutmfe_per_passage_rP3.csv")
p3=p3 %>% select(site, wtAA, mutAA, rP3_passage2)
p3overlap=p3 %>% filter(site %in% c(1416:1434))
p2=read.csv("../mutmfe_data/mutmfe_per_passage_rP2.csv")
p2overlap=p2 %>% filter(site %in% c(1416:1434))
p2p3=p2overlap %>% left_join(p3overlap, by=c("site","wtAA","mutAA"))
#remove lethal mutations
p2p3$rP2_passage2[p2p3$rP2_passage2==-20]=NA
p2p3$rP3_passage2[p2p3$rP3_passage2==-20]=NA
p2p3=p2p3 %>% filter(!wtAA==mutAA)
#get the coefficients of the linear model for p2p3 overlap
coef_p2_lm<-coef(lm(rP2_passage2 ~ rP3_passage2, data = p2p3))
#correct overlap
p2p3$rP3_cor_passage2 = coef_p2_lm[[1]] + (coef_p2_lm[[2]] * p2p3$rP3_passage2)
#correct P3 region
p3$rP3_cor_passage2 = coef_p2_lm[[1]] + (coef_p2_lm[[2]] * p3$rP3_passage2)
#correct P3 dels
delsp3$cor_passage2 = coef_p2_lm[[1]] + (coef_p2_lm[[2]] * delsp3$passage2)
p3=p3 %>% select(site, wtAA, mutAA, rP3_passage2,rP3_cor_passage2)
rm(p2p3, p2overlap,p3overlap,coef_p2_lm)
p2overlap=p2 %>% filter(site %in% c(847:851))
p1=read.csv("../mutmfe_data/mutmfe_per_passage_rP1.csv")
p1overlap=p1 %>% filter(site %in% c(847:851))
p1p2=p1overlap %>% left_join(p2overlap, by=c("site","wtAA","mutAA"))
#remove lethal mutations
p1p2$rP1_passage2[p1p2$rP1_passage2==-20]=NA
p1p2$rP2_passage2[p1p2$rP2_passage2==-20]=NA
p1p2=p1p2 %>% filter(!wtAA==mutAA)
#get cofficients of the linear model for the p1p2 overlap
coef_P1_lm<-coef(lm((rP2_passage2) ~ (rP1_passage2), data = p1p2))
#correct P1 region
p1$rP1_cor_passage2 =coef_P1_lm[[1]] + (coef_P1_lm[[2]] * (p1$rP1_passage2))
p1=p1 %>% select(site, wtAA, mutAA, rP1_passage2,rP1_cor_passage2)
rm(p1p2, p2overlap,p1overlap,coef_P1_lm)
########################################################################
#rename columns to merge data and label lethal muts in corrected dataset as -20s
p1=p1 %>% select(site, wtAA, mutAA, "passage2"=rP1_passage2,"cor_passage2"=rP1_cor_passage2)
p1$cor_passage2[p1$passage2==-20]=-20
p1=p1 %>%filter(site %in% c(1:851))
p2=p2 %>% select(site, wtAA, mutAA, "passage2"=rP2_passage2,"cor_passage2"=rP2_passage2)
p2$cor_passage2[p2$passage2==-20]=-20
p2=p2 %>%filter(site %in% c(852:1429))
p3=p3 %>% select(site, wtAA, mutAA, "passage2"=rP3_passage2,"cor_passage2"=rP3_cor_passage2)
p3$cor_passage2[p3$passage2==-20]=-20
p3=p3 %>%filter(site %in% c(1430:2185))
mfes=rbind(p1,p2)
mfes=rbind(mfes,p3)
#merge dels
delsp1=p1 %>% group_by(site,wtAA) %>% summarise()
delsp1$passage2=NA
delsp1$cor_passage2=NA
delsp1=delsp1 %>%filter(site %in% c(1:846))
delsp1$mutAA="del"
delsp2$cor_passage2=delsp2$passage2
delsp2=delsp2 %>% select(site, "passage2","cor_passage2")
delsp2$cor_passage2[delsp2$passage2==-20]=-20
delsp2=delsp2 %>%filter(site %in% c(847:1429))
delsp2$mutAA="del"
delsp2=delsp2 %>% left_join(unique(mfes[,c(1:2)]), by="site")
delsp3=delsp3 %>% select(site,"passage2","cor_passage2")
delsp3$cor_passage2[delsp3$passage2==-20]=-20
delsp3=delsp3 %>%filter(site %in% c(1430:2185))
delsp3$mutAA="del"
delsp3=delsp3 %>% left_join(unique(p3[,c(1:2)]), by="site")
dels=rbind(delsp1,delsp2)
dels=rbind(dels,delsp3)
rm(p1,p2,p3, delsp1,delsp2,delsp3)
#join data
mfes=rbind(mfes,dels)
View(mfes)
############################################################################
#correct data with mCherry model
mfes$mutation=paste0(mfes$wtAA, mfes$site, mfes$mutAA)
#read experimental data and join to df
data=read.csv("../comp_assay_data.csv") %>% select(mutation, region, avg_norm_t20_t8,sd_norm_t20_t8)
data=data %>% left_join(mfes, by="mutation")
data=data %>% filter(!cor_passage2==-20)
# Fit Linear Model for passage2 corrected vs experimental data
lm_model_passage2 <- lm(log2(avg_norm_t20_t8) ~ cor_passage2, data = data)
# Get Cook's distance to define outliers
cooksd_passage2 <- cooks.distance(lm_model_passage2)
# Identify outliers based on Cook's distance for passage2
outliers_passage2 <- which(cooksd_passage2 >4 / length(cooksd_passage2))
# Create a subset without outliers for passage2
if(length(outliers_passage2)>1){
data_no_outliers_passage2 <- data[-outliers_passage2,]
}else{data_no_outliers_passage2=data}
#lm without outliers
lm_model_passage2 <- (lm(log2(avg_norm_t20_t8) ~ cor_passage2, data = data_no_outliers_passage2))
# Get coefficients of the Linear Model for passage2 corrected vs experimental data
coefficients_passage2 <- coef(lm_model_passage2)
##################################################################################
#apply lm to data and save corrected data
df=mfes %>% select(!mutation)
df$cor_lm_passage2=coefficients_passage2[1]+coefficients_passage2[2]*df$cor_passage2
#label lethal muts as -20s
df$cor_lm_passage2[df$cor_passage2==-20]=-20
#label widtypes as 0s
df$cor_lm_passage2[df$wtAA==df$mutAA]=0
res <- df
for (i in colnames(res[c(4:6)])){
column_name=i
# Calculate min mfe
min_cor_mfe <- min(res[[column_name]][res[[column_name]] > -20], na.rm = TRUE)
# Replace -20 values for min mfe
res[[column_name]][res[[column_name]] == -20] <- (min_cor_mfe)
rm(min_cor_mfe)}
View(res)
